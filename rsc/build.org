
* Before releasing
** Compile reconfigured native sources
#+begin_src shell :dir .. :results output 
rm configure && autoreconf && Rscript -e "devtools::clean_dll(); devtools::document()"
#+end_src

** Reduce software paper size
#+begin_src R :dir .. :results output :async
tools::compactPDF("./vignettes/diseq_package.pdf", gs_quality = "ebook")
#+end_src

** Make documentation

#+begin_src R :dir .. :results output :async
devtools::document()
rmarkdown::render('README.Rmd', output_format = 'md_document')
pkgdown::build_site()
rmarkdown::render('README.Rmd', output_format = 'github_document')
devtools::document()
devtools::spell_check()
devtools::check_man()
devtools::release_checks()
#+end_src

** Remote package checks

*** Windows platforms
#+begin_src R :eval no
devtools::check_win_oldrelease()
devtools::check_win_devel()
devtools::check_win_release()
#+end_src

*** Preconfigured devtools platforms
#+begin_src R :dir .. :results output :async
devtools::check_rhub(env_vars=c(R_COMPILE_AND_INSTALL_PACKAGES = 'always'))
#+end_src

*** Platforms using clang
#+begin_src R :dir .. :async
devtools::check_rhub(
  platforms = c('debian-clang-devel', 'fedora-clang-devel'), 
  env_vars=c(R_COMPILE_AND_INSTALL_PACKAGES = 'always'))
#+end_src

*** Solaris platforms
#+begin_src R :dir .. :async
devtools::check_rhub(
  platforms = c('solaris-x86-patched', 'solaris-x86-patched-ods'), 
  env_vars=c(R_COMPILE_AND_INSTALL_PACKAGES = 'always'))
#+end_src

*** Mac platforms
#+begin_src R :dir .. :async
devtools::check_rhub(
  platforms = c('macos-highsierra-release', 'macos-highsierra-release-cran'), 
  env_vars=c(R_COMPILE_AND_INSTALL_PACKAGES = 'always'))
#+end_src

*** Platforms without long double
#+begin_src R :dir .. :async
devtools::check_rhub(platforms = c('debian-gcc-devel-nold'))
#+end_src

